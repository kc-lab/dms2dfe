.. _programs:

==========================================
Programs
==========================================

Front-end programs of `dms2dfe`
===============================

.. autosummary:: 
	:toctree: generated
    
    dms2dfe.configure.main
	dms2dfe.pipeline.main
	dms2dfe.ana0_fastq2dplx.main
	dms2dfe.ana0_fastq2sbam.main
	dms2dfe.ana0_getfeats.main
	dms2dfe.ana1_sam2mutmat.main
	dms2dfe.ana2_mutmat2fit.main
	dms2dfe.ana3_fit2comparison.main
	dms2dfe.ana4_modeller.main
	dms2dfe.ana4_plotter.main
    
Ordered by steps in analysis
============================

Extracting features of protein (optional) 
-----------------------------------------

Requires PDB structure of protein.

.. automodule:: dms2dfe.ana0_getfeats
   :members:
   :undoc-members:
   :show-inheritance:

Preprocessing .fastq files (optional)
-------------------------------------

This is envoked only when input files are .fastq files.

.. automodule:: dms2dfe.ana0_fastq2dplx
   :members:
   :undoc-members:
   :show-inheritance:

.. automodule:: dms2dfe.ana0_fastq2sbam
   :members:
   :undoc-members:
   :show-inheritance:
   
Step 1 : Variant caling
-----------------------

This requires aligned sorted bam files.

.. automodule:: dms2dfe.ana1_sam2mutmat
   :members:
   :undoc-members:
   :show-inheritance:

Step 2 : Fitness estimations
----------------------------

This step requires mutation matrix of codons (.mut_cds format).

.. automodule:: dms2dfe.ana2_mutmat2fit
   :members:
   :undoc-members:
   :show-inheritance:

Fitness calculations
--------------------

Fitness of mutants was calculated by following equation.
Since DMS studies are primarily based on competition assays, the preferential enrichment of a particular mutant with respect to other can be best described in terms of relative fitness changes.
The fitness could be interpreted into the functional importance at molecular level of the RNA and protein which eventually translate into organismal fitness.
Ftness is calculated as a fold change of frequencies of mutants in selected sample with respect to unselected sample.

.. math::

    FC = \log_{2}\left [ \frac{N_{i,sel}}{N_{i,unsel}} \right ] 

where $FC$ is fold change score, $N_{i,sel}$ and $N_{i,unsel}$ are frequencies of mutant $i^{th}$ in selected and unselected conditions respectively.

This fold change value is dependent on the seqencing depths of the two samples. 
So to eliminate this factor, a normalizing factor is required.
Variant caling reports the mutations at codon level which can be synonymous or non-synonymous depending on the codon usage of host.
Since synonymous mutants express into the same (wild-type) sequence, they can be considered are fairly invariable in terms of their fold change values.  
In other words, since their functional importance would be conserved and equal to wild type allele, fold changes of synonymous mutations can be used benchmark wild type fitness.
So maximum likelihood estimate of the gaussian fitted distribution of fold changes of synonymous mutants is used as a normalizing factor. 
A z score is calculated from the fold changes of the mutations employing population mean and standard deviation from the normalizing factor.

.. math::

    F_i=\frac{FC_{i}-\mu_{FC_{W}}}{\sigma_{FC_{W}}}

where $F_i$ is z-score normalized fitness of $i^{th}$ mutant. $\mu_{FC_{W}}$ and $\sigma_{FC_{W}}$ are a population mean and standard deviation of gaussian fitted distribution of fold changes of wild type (synonymous) mutants respectively.

This approach is efficient in scenarios where synonymous mutants are generated in the clonning method used and coverage across the reference sequence is conserved in both unselected and selected cases.
But especially the later may not be the case especialy in cases of shot gun sequencing methods eg. tagmentation based library preparations.
To address this alternativelly, the nomalization can also be carried out with respect to wild type alleles as described by Melnikov et. al. [@Melnikov2014]. 

Since the fitness values are scaled based on wild type alleles, the mutants can be classified as deleterious (if $F_i$ < -2), neutral (if -2 => $F_i$ =< 2) and beneficial (if $F_i$ > 2) as follows,

.. math::

    \begin{equation}\label{eq:solve}
    M_{i} \in \left \{\begin{matrix}
    deleterious  & if \  F_i<-2 \\ 
    neutral  & if \ -2\geq F_i\leq2 \\ 
    beneficial  & if \ F_i>2
    \end{matrix}\right.
    \end{equation}

where, $M_{i}$ is $i^{th}$ kind of survived mutant.

Step 3 : Comparisons
--------------------

.. automodule:: dms2dfe.ana3_fit2comparison
   :members:
   :undoc-members:
   :show-inheritance:

Visualizations
-------------- 

.. automodule:: dms2dfe.ana4_plotter
   :members:
   :undoc-members:
   :show-inheritance:

Classification models
--------------------- 

.. automodule:: dms2dfe.ana4_modeller
   :members:
   :undoc-members:
   :show-inheritance:

